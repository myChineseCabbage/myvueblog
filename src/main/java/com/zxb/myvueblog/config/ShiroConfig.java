package com.zxb.myvueblog.config;import com.zxb.myvueblog.shiro.AccountRealm;import com.zxb.myvueblog.shiro.JwtFilter;import org.apache.shiro.mgt.SecurityManager;import org.apache.shiro.mgt.SessionsSecurityManager;import org.apache.shiro.session.mgt.SessionManager;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.spring.web.config.DefaultShiroFilterChainDefinition;import org.apache.shiro.spring.web.config.ShiroFilterChainDefinition;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;import org.crazycake.shiro.RedisCacheManager;import org.crazycake.shiro.RedisSessionDAO;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.servlet.Filter;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Map;@Configurationpublic class ShiroConfig {    @Bean    public SessionManager sessionManager(RedisSessionDAO redisSessionDAO){        DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();        sessionManager.setSessionDAO(redisSessionDAO);        return sessionManager;    }    @Bean    public SessionsSecurityManager securityManager(AccountRealm accountRealm,                                                   SessionManager sessionManager,                                                   RedisCacheManager redisCacheManager){        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(accountRealm);        securityManager.setSessionManager(sessionManager);        securityManager.setCacheManager(redisCacheManager);        return  securityManager;    }    @Bean    public  ShiroFilterChainDefinition shiroFilterChainDefinition(){        DefaultShiroFilterChainDefinition shiroFilterChainDefinition = new DefaultShiroFilterChainDefinition();        Map<String,String> filterMap = new LinkedHashMap<>();        filterMap.put("/**","jwt");        shiroFilterChainDefinition.addPathDefinitions(filterMap);        return  shiroFilterChainDefinition;    }    @Bean("shiroFilterFactoryBean")    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager, ShiroFilterChainDefinition shiroFilterChainDefinition){        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();        shiroFilterFactoryBean.setSecurityManager(securityManager);        Map<String, Filter> filters = new HashMap<>();        filters.put("jwt",jwtFilter());        shiroFilterFactoryBean.setFilters(filters);        Map<String,String> filterMap = shiroFilterChainDefinition.getFilterChainMap();        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);        return  shiroFilterFactoryBean;    }    @Bean    JwtFilter jwtFilter(){        return  new JwtFilter();    }}