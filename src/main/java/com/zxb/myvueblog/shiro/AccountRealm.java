package com.zxb.myvueblog.shiro;import com.zxb.myvueblog.entity.User;import com.zxb.myvueblog.service.IUserService;import com.zxb.myvueblog.utils.JwtUtils;import org.apache.shiro.authc.*;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.rmi.activation.UnknownObjectException;@Componentpublic class AccountRealm extends AuthorizingRealm {    @Autowired    JwtUtils jwtUtils;    @Autowired    IUserService userServiceImpl;    @Override    public boolean supports(AuthenticationToken token) {        return token instanceof  JwtToken;    }    //拿到用户信息获取权限，封装成AuthorizationInfo    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {        return null;    }    //身份验证    //登录的处理    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {        JwtToken jwtToken = (JwtToken) authenticationToken;        String userId = jwtUtils.getClaimsBytoken((String)jwtToken.getPrincipal()).getSubject();        User user = userServiceImpl.getById(Long.valueOf(userId));        if(user == null){            throw  new UnknownAccountException("账户不存在");        }        if(user.getStatus() == -1){            throw  new LockedAccountException("账户已经被锁定");        }        AccountProfile accountProfile = new AccountProfile();        BeanUtils.copyProperties(user,accountProfile);        return new SimpleAuthenticationInfo(accountProfile,jwtToken.getCredentials(),getName());    }}